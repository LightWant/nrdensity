import networkx as nx
import matplotlib.pyplot as plt
import sys

sgNodes = "6702 6738 6778 33603 52049 52307 52982 53016 53031 53069 53220 53283 53708 53767 54029 54095 54190 54451 54664 55249 56329 56336 56723 56946 57156 57773 57863 60574 60738 61244 61475 63095 64696 67107 67575 67689 67729 69362 69383 70386 70427 70438 70619 70739 71249 71416 72218 72922 73672 74270 74344 74390 74432 74435 74849 75149 79189 79292 80085 80405 80943 81040 86984 89858 91785 94759 95543 96467 98987 100458 103210 108013 110988 111029 111030 111033 148281 157613 178482 218866 4035537"
R = "6409 6702 6738 6778 7582 14396 14450 33603 52049 52257 52261 52307 52545 52982 53016 53031 53047 53069 53095 53220 53283 53433 53508 53683 53708 53767 54029 54043 54095 54160 54190 54451 54664 55249 55338 55462 55590 56329 56336 56723 56946 57156 57213 57603 57773 57799 57863 58118 58340 58558 58653 59896 60574 60581 60738 61186 61244 61475 61516 61879 62185 62547 63042 63095 63411 63453 63529 63546 63609 63637 64696 64794 65858 66758 67107 67575 67689 67699 67729 68004 68524 68637 68803 69362 69383 69456 70386 70427 70438 70462 70619 70739 71000 71036 71249 71416 71579 71819 72108 72194 72218 72530 72922 73042 73599 73672 74270 74344 74390 74432 74435 74443 74453 74849 75149 75417 75804 76000 79189 79292 80059 80085 80155 80405 80943 81027 81040 82011 82191 82350 82415 82495 83424 84133 84762 85537 86102 86497 86984 89858 90131 90746 91298 91312 91400 91482 91785 92847 92972 92984 94258 94672 94759 95159 95313 95543 96467 96824 97275 98150 98242 98987 99828 100434 100458 100531 101206 101811 103210 104193 104350 105355 105550 106857 106867 108013 110988 111029 111030 111033 111048 111185 115756 116608 117090 117259 118695 118901 119652 120043 121139 121311 121636 127401 127777 128175 129132 132439 132442 132732 133070 142468 143109 143617 144840 145434 146214 146613 147453 148281 148563 149769 152134 153127 154963 157613 157887 158838 166315 167405 167423 168339 168662 168880 168890 171110 172043 172955 176140 176300 178482 178808 218866 219010 222518 227056 228708 231428 235317 236002 245354 247285 247812 248657 252457 257615 262815 364280 515304 517645 517916 568865 581747 753555 765981 824577 1357608 1442719 1444856 1444857 1444858 1627189 1887043 2664981 4035537"



sgNodes = set(map(int, sgNodes.split()))
R = set(map(int, R.split()))
LA = set(map(int, LA.split()))

allNodes = R.union(LA)

print("len(LADS)", len(sgNodes))
print("len(R) ", len(R))
print("len(my)", len(LA))


G = nx.Graph()

nc = []
for u in allNodes:
    G.add_node(u)
    if u in LA.intersection(sgNodes):
        nc.append("black")
    elif u in LA.intersection(R):
        nc.append("red")
    elif u in sgNodes:
        nc.append("green")
    elif u in R:
        nc.append("blue")
    elif u in LA:
        nc.append("yellow")
    else:
        print("error")



with open(sys.argv[1], "r") as f:
    for l in f:
        u, v = map(int, l.split())
        if u in allNodes and v in allNodes:
            G.add_edge(u, v)

pos = nx.spring_layout(G)  # 选择布局算法;
nx.draw(G, pos, node_size=10, with_labels=False,
        width=0.03, node_color=nc)
plt.show()